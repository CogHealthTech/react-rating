{"version":3,"file":"react-rating.umd.min.js","sources":["../src/utils/style.js","../src/RatingSymbol.js","../src/utils/noop.js","../src/Rating.js","../src/RatingAPILayer.js"],"sourcesContent":["var style = {\n  display: 'inline-block',\n  borderRadius: '50%',\n  border: '5px double white',\n  width: 30,\n  height: 30\n};\n\nexport default {\n  empty: {\n    ...style,\n    backgroundColor: '#ccc'\n  },\n  full: {\n    ...style,\n    backgroundColor: 'black'\n  },\n  placeholder: {\n    ...style,\n    backgroundColor: 'red'\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Return the corresponding React node for an icon.\nconst _iconNode = (icon) => {\n  // If it is already a React Element just return it.\n  if (React.isValidElement(icon)) {\n    return icon;\n  }\n  // If it is an object, try to use it as a CSS style object.\n  if (typeof icon === 'object' && icon !== null) {\n    return <span style={icon} />;\n  }\n  // If it is a string, use it as class names.\n  if (Object.prototype.toString.call(icon) === '[object String]') {\n    return <span className={icon} />;\n  }\n};\n\nclass RatingSymbol extends React.PureComponent {\n  render() {\n    const {\n      index,\n      inactiveIcon,\n      activeIcon,\n      percent,\n      direction,\n      readonly,\n      onClick,\n      onMouseMove,\n      currentValue,\n      renderedValue\n    } = this.props;\n    const backgroundNode = _iconNode(inactiveIcon);\n    const iconNode = _iconNode(activeIcon);\n    const iconContainerStyle = {\n      display: 'inline-block',\n      position: 'absolute',\n      overflow: 'hidden',\n      top: 0,\n      [direction === 'rtl' ? 'right' : 'left']: 0,\n      width: `${percent}%`\n    };\n    const style = {\n      cursor: !readonly ? 'pointer' : 'inherit',\n      display: 'inline-block',\n      position: 'relative'\n    };\n\n    function handleMouseMove(e) {\n      if (onMouseMove) {\n        onMouseMove(index, e);\n      }\n    }\n\n    function handleMouseClick(e) {\n      if (onClick) {\n        // [Supporting both TouchEvent and MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent)\n        // We must prevent firing click event twice on touch devices.\n        e.preventDefault();\n        onClick(index, e);\n      }\n    }\n\n    return (\n      <span\n        style={style}\n        onClick={handleMouseClick}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseClick}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseClick}\n      >\n        {backgroundNode}\n        <span style={iconContainerStyle} className={currentValue === renderedValue ? 'react-rating-active' : null}>\n          {iconNode}\n        </span>\n      </span>\n    );\n  }\n}\n\n// Define propTypes only in development. They will be void in production.\nRatingSymbol.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  index: PropTypes.number.isRequired,\n  readonly: PropTypes.bool.isRequired,\n  inactiveIcon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.element\n  ]).isRequired,\n  activeIcon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.element\n  ]).isRequired,\n  percent: PropTypes.number.isRequired,\n  direction: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onTouchEnd: PropTypes.func,\n  currentValue: PropTypes.number.isRequired,\n  renderedValue: PropTypes.number.isRequired\n};\n\nexport default RatingSymbol;\n","function noop() {}\nnoop._name = 'react_rating_noop';\n\nexport default noop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Symbol from './RatingSymbol';\nimport noop from './utils/noop';\n\nclass Rating extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Indicates the value that is displayed to the user in the form of symbols.\n      // It can be either 0 (for no displayed symbols) or (0, end]\n      displayValue: this.props.value,\n      // Indicates if the user is currently hovering over the rating element\n      interacting: false\n    };\n    this.onMouseLeave = this.onMouseLeave.bind(this);\n    this.symbolMouseMove = this.symbolMouseMove.bind(this);\n    this.symbolClick = this.symbolClick.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const valueChanged = this.props.value !== nextProps.value;\n    this.setState((prevState) => ({\n      displayValue: valueChanged ? nextProps.value : prevState.displayValue\n    }));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Ignore state update due to value changed from props.\n    // Usually originated through an onClick event.\n    if (prevProps.value !== this.props.value) {\n      return;\n    }\n\n    // When hover ends, call this.props.onHover with no value.\n    if (prevState.interacting && !this.state.interacting) {\n      return this.props.onHover();\n    }\n\n    // When hover over.\n    if (this.state.interacting) {\n      this.props.onHover(this.state.displayValue);\n    }\n  }\n\n  symbolClick(symbolIndex, event) {\n    const value = this.calculateDisplayValue(symbolIndex, event);\n    this.props.onClick(value, event);\n  }\n\n  symbolMouseMove(symbolIndex, event) {\n    const value = this.calculateDisplayValue(symbolIndex, event);\n    // This call should cause an update only if the state changes.\n    // Mainly the first time the mouse enters and whenever the value changes.\n    // So DidComponentUpdate is NOT called for every mouse movement.\n    this.setState({\n      interacting: !this.props.readonly,\n      displayValue: value\n    });\n  }\n\n  onMouseLeave() {\n    this.setState({\n      displayValue: this.props.value,\n      interacting: false\n    });\n  }\n\n  calculateDisplayValue(symbolIndex, event) {\n    const percentage = this.calculateHoverPercentage(event);\n    // Get the closest top fraction.\n    const fraction = Math.ceil(percentage % 1 * this.props.fractions) / this.props.fractions;\n    // Truncate decimal trying to avoid float precission issues.\n    const precision = 10 ** 3;\n    const displayValue =\n      symbolIndex + (Math.floor(percentage) + Math.floor(fraction * precision) / precision);\n    // ensure the returned value is greater than 0 and lower than totalSymbols\n    return displayValue > 0 ? displayValue > this.props.totalSymbols ? this.props.totalSymbols : displayValue : 1 / this.props.fractions;\n  }\n\n  calculateHoverPercentage(event) {\n    const clientX = event.nativeEvent.type.indexOf(\"touch\") > -1\n      ? event.nativeEvent.type.indexOf(\"touchend\") > -1\n        ? event.changedTouches[0].clientX\n        : event.touches[0].clientX\n      : event.clientX;\n\n    const targetRect = event.target.getBoundingClientRect();\n    const delta = this.props.direction === 'rtl'\n      ? targetRect.right - clientX\n      : clientX - targetRect.left;\n\n    // Returning 0 if the delta is negative solves the flickering issue\n    return delta < 0 ? 0 : delta / targetRect.width;\n  }\n\n  render() {\n    const {\n      readonly,\n      quiet,\n      totalSymbols,\n      value,\n      placeholderValue,\n      direction,\n      emptySymbol,\n      fullSymbol,\n      placeholderSymbol,\n      className,\n      id,\n      style,\n      tabIndex\n    } = this.props;\n    const { displayValue, interacting } = this.state;\n    const symbolNodes = [];\n    const empty = [].concat(emptySymbol);\n    const full = [].concat(fullSymbol);\n    const placeholder = [].concat(placeholderSymbol);\n    const shouldDisplayPlaceholder =\n      placeholderValue !== 0 &&\n      value === 0 &&\n      !interacting;\n\n    // The value that will be used as base for calculating how to render the symbols\n    let renderedValue;\n    if (shouldDisplayPlaceholder) {\n      renderedValue = placeholderValue;\n    } else {\n      renderedValue = quiet ? value : displayValue;\n    }\n\n    // The amount of full symbols\n    const fullSymbols = Math.floor(renderedValue);\n\n    for (let i = 0; i < totalSymbols; i++) {\n      let percent;\n      // Calculate each symbol's fullness percentage\n      if (i - fullSymbols < 0) {\n        percent = 100;\n      } else if (i - fullSymbols === 0) {\n        percent = (renderedValue - i) * 100;\n      } else {\n        percent = 0;\n      }\n\n      symbolNodes.push(\n        <Symbol\n          key={i}\n          index={i}\n          readonly={readonly}\n          inactiveIcon={empty[i % empty.length]}\n          activeIcon={\n            shouldDisplayPlaceholder ? placeholder[i % full.length] : full[i % full.length]\n          }\n          currentValue={i}\n          renderedValue={renderedValue}\n          percent={percent}\n          direction={direction}\n          {...(!readonly && {\n            onClick: this.symbolClick,\n            onMouseMove: this.symbolMouseMove,\n            onTouchMove: this.symbolMouseMove,\n            onTouchEnd: this.symbolClick\n          })}\n        />\n      );\n    }\n\n    return (\n      <span\n        id={id}\n        style={{...style, display: 'inline-block', direction }}\n        className={className}\n        tabIndex={tabIndex}\n        aria-label={this.props['aria-label']}\n        onMouseLeave={readonly ? noop : this.onMouseLeave}\n      >\n        {symbolNodes}\n      </span>\n    );\n  }\n}\n\n// Define propTypes only in development.\nRating.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  totalSymbols: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired, // Always >= 0\n  placeholderValue: PropTypes.number.isRequired,\n  readonly: PropTypes.bool.isRequired,\n  quiet: PropTypes.bool.isRequired,\n  fractions: PropTypes.number.isRequired,\n  direction: PropTypes.string.isRequired,\n  emptySymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]).isRequired,\n  fullSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]).isRequired,\n  placeholderSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  onClick: PropTypes.func.isRequired,\n  onHover: PropTypes.func.isRequired\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Style from './utils/style';\nimport Rating from './Rating';\nimport noop from './utils/noop';\n\nclass RatingAPILayer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.initialRating\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleHover = this.handleHover.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setState({\n      value: nextProps.initialRating\n    });\n  }\n\n  handleClick(value, e) {\n    const newValue = this.translateDisplayValueToValue(value);\n    this.props.onClick(newValue);\n    // Avoid calling setState if not necessary. Micro optimisation.\n    if (this.state.value !== newValue) {\n      // If we have a new value trigger onChange callback.\n      this.setState({\n        value: newValue\n      }, () => this.props.onChange(this.state.value));\n    }\n  }\n\n  handleHover(displayValue) {\n    const value = displayValue === undefined\n      ? displayValue\n      : this.translateDisplayValueToValue(displayValue);\n    this.props.onHover(value);\n  }\n\n  translateDisplayValueToValue(displayValue) {\n    const translatedValue = displayValue * this.props.step + this.props.start;\n    // minimum value cannot be equal to start, since it's exclusive\n    return translatedValue === this.props.start\n      ? translatedValue + 1 / this.props.fractions\n      : translatedValue;\n  }\n\n  tranlateValueToDisplayValue(value) {\n    if (value === undefined) {\n      return 0;\n    }\n    return (value - this.props.start) / this.props.step;\n  }\n\n  render() {\n    const {\n      step,\n      emptySymbol,\n      fullSymbol,\n      placeholderSymbol,\n      readonly,\n      quiet,\n      fractions,\n      direction,\n      start,\n      stop,\n      id,\n      className,\n      style,\n      tabIndex\n    } = this.props;\n\n    function calculateTotalSymbols(start, stop, step) {\n      return Math.floor((stop - start) / step);\n    }\n\n    return (\n      <Rating\n        id={id}\n        style={style}\n        className={className}\n        tabIndex={tabIndex}\n        aria-label={this.props['aria-label']}\n        totalSymbols={calculateTotalSymbols(start, stop, step)}\n        value={this.tranlateValueToDisplayValue(this.state.value)}\n        placeholderValue={this.tranlateValueToDisplayValue(this.props.placeholderRating)}\n        readonly={readonly}\n        quiet={quiet}\n        fractions={fractions}\n        direction={direction}\n        emptySymbol={emptySymbol}\n        fullSymbol={fullSymbol}\n        placeholderSymbol={placeholderSymbol}\n        onClick={this.handleClick}\n        onHover={this.handleHover}\n      />\n    );\n  }\n}\n\nRatingAPILayer.defaultProps = {\n  start: 0,\n  stop: 5,\n  step: 1,\n  readonly: false,\n  quiet: false,\n  fractions: 1,\n  direction: 'ltr',\n  onHover: noop,\n  onClick: noop,\n  onChange: noop,\n  emptySymbol: Style.empty,\n  fullSymbol: Style.full,\n  placeholderSymbol: Style.placeholder\n};\n\n// Define propTypes only in development.\nRatingAPILayer.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  start: PropTypes.number,\n  stop: PropTypes.number,\n  step: PropTypes.number,\n  initialRating: PropTypes.number,\n  placeholderRating: PropTypes.number,\n  readonly: PropTypes.bool,\n  quiet: PropTypes.bool,\n  fractions: PropTypes.number,\n  direction: PropTypes.string,\n  emptySymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  fullSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  placeholderSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func\n};\n\nexport default RatingAPILayer;\n"],"names":["style","display","borderRadius","border","width","height","empty","backgroundColor","full","placeholder","_iconNode","icon","React","isValidElement","_typeof","Object","prototype","toString","call","className","RatingSymbol","PureComponent","this","props","index","inactiveIcon","activeIcon","percent","direction","readonly","onClick","onMouseMove","currentValue","renderedValue","backgroundNode","iconNode","iconContainerStyle","position","overflow","top","cursor","handleMouseMove","e","handleMouseClick","preventDefault","onMouseUp","onTouchMove","onTouchEnd","noop","_name","Rating","state","displayValue","_this","value","interacting","onMouseLeave","bind","symbolMouseMove","symbolClick","nextProps","valueChanged","setState","prevState","prevProps","onHover","symbolIndex","event","calculateDisplayValue","percentage","calculateHoverPercentage","fraction","Math","ceil","fractions","precision","floor","totalSymbols","clientX","nativeEvent","type","indexOf","changedTouches","touches","targetRect","target","getBoundingClientRect","delta","right","left","quiet","placeholderValue","emptySymbol","fullSymbol","placeholderSymbol","id","tabIndex","symbolNodes","concat","shouldDisplayPlaceholder","fullSymbols","i","push","_Symbol","key","length","RatingAPILayer","initialRating","handleClick","handleHover","newValue","translateDisplayValueToValue","_this2","onChange","undefined","translatedValue","step","start","stop","calculateTotalSymbols","tranlateValueToDisplayValue","placeholderRating","defaultProps","Style"],"mappings":"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"}